// Based on WebService Komerci English manual v2.5, 09/20/10

var https = require('https')
  , url = require('url')
  , qs = require('querystring')
  , xml2js = require('xml2js')

var SERVICE_URL = 'https://ecommerce.redecard.com.br/pos_virtual/wskomerci/cap.asmx'
  , TYPES = { FULL_PAYMENT: 4
            , ISSUER_INSTALLMENTS: 6
            , MERCHANT_INSTALLMENTS: 8
            , PRE_AUTHORIZATION: 73
            , IATA_FULL_PAYMENT: 39
            , IATA_INSTALLMENTS: 40
            }

function serviceRequest(serviceUrl, method, params, callback) {
  var parsedUrl = url.parse(serviceUrl + '/' + method)
    , options = { host: parsedUrl.host
                , port: 443
                , path: parsedUrl.pathname
                , method: 'POST'
                , headers: { 'Content-Type': 'application/x-www-form-urlencoded'
                           , 'Host': parsedUrl.host
                           , 'User-Agent': 'https://github.com/viktors/node-redecard'
                           }
                }
    , data = qs.stringify(params)

  var req = https.request(options, function(res) {
    console.log("statusCode: ", res.statusCode)
    console.log("headers: ", res.headers)

    var buf = []
    res.on('data', function(data) {
      buf.push(data)
    })
    res.on('end', function() {
      var parser = new xml2js.Parser()
      parser.addListener('end', function(result) {
          callback(0, result)
      })
      parser.parseString(buf.join(''))
    })
  })
  req.on('error', function(e) {
    console.error(e)
  })
  req.write(data)
  req.end()
}

function zeroPad(num, places) {
  var s = String(parseInt(num, 10))
  return s.length >= places ? s : new Array(places - s.length + 1).join('0') + s
}

function getAuthorized(params, callback) {
  var paramDefs = 
    { amount:         { field: 'TOTAL',        size: 10, required: true,  description: 'Sales total amount', formatter: function(n) { return n.toFixed(2) }}
    , type:           { field: 'TRANSACAO',    size:  2, required: true,  description: 'Transaction type code', formatter: function(n) { return zeroPad(n, 2) }}
    , installments:   { field: 'PARCELAS',     size:  2, required: true,  description: 'Number of installments', formatter: function(n) { return zeroPad(n, 2) }}
    , supplierId:     { field: 'FILIACAO',     size:  9, required: true,  description: 'Supplying store membership number'}
    , orderId:        { field: 'NUMPEDIDO',    size: 16, required: true,  description: 'Order number generated by the merchant'}
    , cardNumber:     { field: 'NRCARTAO',     size: 16, required: true,  description: 'Card number', formatter: function(s) { return String(s).replace(/[^0-9]+/g, '') }}
    , cardCode:       { field: 'CVC2',         size:  3, required: true,  description: 'CVC2', formatter: function(s) { return String(s).replace(/[^0-9]+/g, '') }}
    , cardExpMonth:   { field: 'MES',          size:  2, required: true,  description: 'Card expiration month', formatter: function(n) { return zeroPad(n, 2) }}
    , cardExpYear:    { field: 'ANO',          size:  2, required: true,  description: 'Card expiration year', formatter: function(n) { return zeroPad(n - 2000, 2) }}
    , cardFullName:   { field: 'PORTADOR',     size: 50, required: true,  description: 'Cardholder name'}
    , iata:           { field: 'IATA',         size:  9, required: false, description: 'Airline: IATA code' }
    , distributorId:  { field: 'DISTRIBUIDOR', size:  9, required: false, description: 'Membership number of distributing store / card issuer, when B2B'}
    , concentradorId: { field: 'CONCENTRADOR', size:  5, required: false, description: 'N/A – Send parameter blank'} // no idea what it is
    , boardingTax:    { field: 'TAXAEMBARQUE', size: 10, required: false, description: 'Airline: Boarding tax'}
    , boardingDate:   { field: 'ENTRADA',      size: 10, required: false, description: 'Airline: Boarding date'}
    , docNum1:        { field: 'NUMDOC1',      size: 16, required: false, description: 'Airline: ticket number of the main passenger'}
    , docNum2:        { field: 'NUMDOC2',      size: 16, required: false, description: 'Airline: ticket number of the second passenger'}
    , docNum3:        { field: 'NUMDOC3',      size: 16, required: false, description: 'Airline: ticket number of the third passenger'}
    , docNum4:        { field: 'NUMDOC4',      size: 16, required: false, description: 'Airline: ticket number of the fourth passenger'}
    , pax1:           { field: 'PAX1',         size: 26, required: false, description: 'Airline: The name of the main passenger'}
    , pax2:           { field: 'PAX2',         size: 26, required: false, description: 'Airline: The name of the second passenger'}
    , pax3:           { field: 'PAX3',         size: 26, required: false, description: 'Airline: The name of the third passenger'}
    , pax4:           { field: 'PAX4',         size: 26, required: false, description: 'Airline: The name of the fourth passenger'}
    , autoConfirm:    { field: 'CONFTXN',      size:  1, required: false, description: 'Confirmation Flag', formatter: function(b) { return b ? 'S' : '' }}
    , additionalData: { field: 'ADD_Data',     size:  0, required: false, description: 'Only for Airline Companies, Hotels and Car Rental merchants'}
    }

  var paramsToSend = {}
  Object.keys(params).forEach(function(param) {
    var def = paramDefs[param]
    if(!def) throw('Unknown parameter: ' + param)
    var value = params[param]
    value = def.formatter ? def.formatter(value) : String(value)
    if(value.length > def.size) throw('Parameter value too long: ' + param)
    paramsToSend[def.field] = value
  })
  // defaults
  Object.keys(paramDefs).map(function(param) {
    var def = paramDefs[param]
    if(!paramsToSend.hasOwnProperty(def.field)) paramsToSend[def.field] = ''
  })
  console.log(paramsToSend)
  
  /* PARCELAS must be filled out with the value “00” (zero zero) when the “TRANSACAO” parameter is “04” or 
     “39”, that is, full payment/cash. */
  if([TYPES.FULL_PAYMENT, TYPES.IATA_FULL_PAYMENT].indexOf(params.type) != -1) {
    if(params.installments !== 0) throw('TODO');
  }  
  
  serviceRequest(SERVICE_URL, 'GetAuthorized', paramsToSend, callback)
}

module.exports = 
  { TYPES: TYPES
  , getAuthorized: getAuthorized
  }
